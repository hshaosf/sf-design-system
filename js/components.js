"use strict";(function ($) {
    $().ready(function () {
        /*
                            * Iterate though navItems and check if it is in the href.
                            * If yes, then add is-active class to corresponding menu link.
                            */
        var href = document.location.href.toLowerCase();
        var navItems = ["services", "departments"];

        for (var i = 0, l = navItems.length; i < l; i++) {
            var nav = navItems[i];
            if (new RegExp("/" + nav).test(href)) {
                $('.sfgov-main-navigation ul.menu a[data-drupal-link-system-path=' + nav + ']').addClass('is-active');
                break;
            };
        };
    });
})(jQuery);
'use strict';module.exports = {
  prefix: 'sfgov' };
'use strict';module.exports = {
  // This used to be conditionally dependent on whether the
  // browser supported touch events; if it did, `CLICK` was set to
  // `touchstart`.  However, this had downsides:
  //
  // * It pre-empted mobile browsers' default behavior of detecting
  //   whether a touch turned into a scroll, thereby preventing
  //   users from using some of our components as scroll surfaces.
  //
  // * Some devices, such as the Microsoft Surface Pro, support *both*
  //   touch and clicks. This meant the conditional effectively dropped
  //   support for the user's mouse, frustrating users who preferred
  //   it on those systems.
  CLICK: 'click' };
'use strict';
var domready = require('domready');

/**
                                     * The 'polyfills' define key ECMAScript 5 methods that may be missing from
                                     * older browsers, so must be loaded first.
                                     */
require('./polyfills');

var uswds = require('./config');

var components = require('./components');
uswds.components = components;

domready(function () {
  var target = document.body;
  for (var name in components) {
    var behavior = components[name];
    behavior.on(target);
  }
});

module.exports = uswds;
"use strict";var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};!function i(c, u, s) {function a(e, t) {if (!u[e]) {if (!c[e]) {var n = "function" == typeof require && require;if (!t && n) return n(e, !0);if (f) return f(e, !0);var r = new Error("Cannot find module '" + e + "'");throw r.code = "MODULE_NOT_FOUND", r;}var o = u[e] = { exports: {} };c[e][0].call(o.exports, function (t) {return a(c[e][1][t] || t);}, o, o.exports, i, c, u, s);}return u[e].exports;}for (var f = "function" == typeof require && require, t = 0; t < s.length; t++) {a(s[t]);}return a;}({ 1: [function (t, e, n) {"use strict";e.exports = function (t, e, n) {if (t.filter) return t.filter(e, n);if (null == t) throw new TypeError();if ("function" != typeof e) throw new TypeError();for (var r = [], o = 0; o < t.length; o++) {if (c.call(t, o)) {var i = t[o];e.call(n, i, o, t) && r.push(i);}}return r;};var c = Object.prototype.hasOwnProperty;}, {}], 2: [function (t, e, n) {"use strict";e.exports = function (t, e, n) {if (t.forEach) t.forEach(e, n);else for (var r = 0; r < t.length; r += 1) {e.call(n, t[r], r, t);}};}, {}], 3: [function (t, e, n) {"use strict";"document" in window.self && ("classList" in document.createElement("_") && (!document.createElementNS || "classList" in document.createElementNS("http://www.w3.org/2000/svg", "g")) || function (t) {if ("Element" in t) {var e = "classList",n = "prototype",r = t.Element[n],o = Object,i = String[n].trim || function () {return this.replace(/^\s+|\s+$/g, "");},c = Array[n].indexOf || function (t) {for (var e = 0, n = this.length; e < n; e++) {if (e in this && this[e] === t) return e;}return -1;},u = function u(t, e) {this.name = t, this.code = DOMException[t], this.message = e;},s = function s(t, e) {if ("" === e) throw new u("SYNTAX_ERR", "An invalid or illegal string was specified");if (/\s/.test(e)) throw new u("INVALID_CHARACTER_ERR", "String contains an invalid character");return c.call(t, e);},a = function a(t) {for (var e = i.call(t.getAttribute("class") || ""), n = e ? e.split(/\s+/) : [], r = 0, o = n.length; r < o; r++) {this.push(n[r]);}this._updateClassName = function () {t.setAttribute("class", this.toString());};},f = a[n] = [],l = function l() {return new a(this);};if (u[n] = Error[n], f.item = function (t) {return this[t] || null;}, f.contains = function (t) {return -1 !== s(this, t += "");}, f.add = function () {for (var t, e = arguments, n = 0, r = e.length, o = !1; t = e[n] + "", -1 === s(this, t) && (this.push(t), o = !0), ++n < r;) {}o && this._updateClassName();}, f.remove = function () {var t,e,n = arguments,r = 0,o = n.length,i = !1;do {for (t = n[r] + "", e = s(this, t); -1 !== e;) {this.splice(e, 1), i = !0, e = s(this, t);}} while (++r < o);i && this._updateClassName();}, f.toggle = function (t, e) {t += "";var n = this.contains(t),r = n ? !0 !== e && "remove" : !1 !== e && "add";return r && this[r](t), !0 === e || !1 === e ? e : !n;}, f.toString = function () {return this.join(" ");}, o.defineProperty) {var d = { get: l, enumerable: !0, configurable: !0 };try {o.defineProperty(r, e, d);} catch (t) {void 0 !== t.number && -2146823252 !== t.number || (d.enumerable = !1, o.defineProperty(r, e, d));}} else o[n].__defineGetter__ && r.__defineGetter__(e, l);}}(window.self), function () {var t = document.createElement("_");if (t.classList.add("c1", "c2"), !t.classList.contains("c2")) {var e = function e(t) {var r = DOMTokenList.prototype[t];DOMTokenList.prototype[t] = function (t) {var e,n = arguments.length;for (e = 0; e < n; e++) {t = arguments[e], r.call(this, t);}};};e("add"), e("remove");}if (t.classList.toggle("c3", !1), t.classList.contains("c3")) {var n = DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle = function (t, e) {return 1 in arguments && !this.contains(t) == !e ? e : n.call(this, t);};}t = null;}());}, {}], 4: [function (t, n, e) {"use strict";var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {return typeof t === "undefined" ? "undefined" : _typeof(t);} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);};!function (t, e) {void 0 !== n ? n.exports = e() : "function" == typeof define && "object" == r(define.amd) ? define(e) : this.domready = e();}(0, function () {var _t,e = [],n = document,r = n.documentElement.doScroll,o = "DOMContentLoaded",i = (r ? /^loaded|^c/ : /^loaded|^i|^c/).test(n.readyState);return i || n.addEventListener(o, _t = function t() {for (n.removeEventListener(o, _t), i = 1; _t = e.shift();) {_t();}}), function (t) {i ? setTimeout(t, 0) : e.push(t);};});}, {}], 5: [function (t, e, n) {"use strict";var r;e.exports = ((r = document.createElement("div")).setAttribute("data-a-b", "c"), Boolean(r.dataset && "c" === r.dataset.aB) ? function (t) {return t.dataset;} : function (t) {var e = {},n = t.attributes;function r() {return this.value;}function o(t, e) {void 0 === e ? this.removeAttribute(t) : this.setAttribute(t, e);}for (var i = 0, c = n.length; i < c; i++) {var u = n[i];if (u) {var s = u.name;if (0 === s.indexOf("data-")) {var a = s.slice(5).replace(/-./g, function (t) {return t.charAt(1).toUpperCase();}),f = u.value;Object.defineProperty(e, a, { enumerable: !0, get: r.bind({ value: f || "" }), set: o.bind(t, s) });}}}return e;});}, {}], 6: [function (t, e, n) {"use strict";var r;"function" != typeof (r = window.Element.prototype).matches && (r.matches = r.msMatchesSelector || r.mozMatchesSelector || r.webkitMatchesSelector || function (t) {for (var e = (this.document || this.ownerDocument).querySelectorAll(t), n = 0; e[n] && e[n] !== this;) {++n;}return Boolean(e[n]);}), "function" != typeof r.closest && (r.closest = function (t) {for (var e = this; e && 1 === e.nodeType;) {if (e.matches(t)) return e;e = e.parentNode;}return null;});}, {}], 7: [function (t, p, e) {(function (t) {"use strict";var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {return typeof t === "undefined" ? "undefined" : _typeof(t);} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);},r = NaN,o = "[object Symbol]",i = /^\s+|\s+$/g,c = /^[-+]0x[0-9a-f]+$/i,u = /^0b[01]+$/i,s = /^0o[0-7]+$/i,a = parseInt,e = "object" == (void 0 === t ? "undefined" : n(t)) && t && t.Object === Object && t,f = "object" == ("undefined" == typeof self ? "undefined" : n(self)) && self && self.Object === Object && self,l = e || f || Function("return this")(),d = Object.prototype.toString,g = Math.max,m = Math.min,w = function w() {return l.Date.now();};function x(t) {var e = void 0 === t ? "undefined" : n(t);return !!t && ("object" == e || "function" == e);}function v(t) {return "symbol" == (void 0 === t ? "undefined" : n(t)) || !!(e = t) && "object" == (void 0 === e ? "undefined" : n(e)) && d.call(t) == o;var e;}function E(t) {if ("number" == typeof t) return t;if (v(t)) return r;if (x(t)) {var e = "function" == typeof t.valueOf ? t.valueOf() : t;t = x(e) ? e + "" : e;}if ("string" != typeof t) return 0 === t ? t : +t;t = t.replace(i, "");var n = u.test(t);return n || s.test(t) ? a(t.slice(2), n ? 2 : 8) : c.test(t) ? r : +t;}p.exports = function (r, o, t) {var i,c,u,s,a,f,l = 0,d = !1,v = !1,e = !0;if ("function" != typeof r) throw new TypeError("Expected a function");function p(t) {var e = i,n = c;return i = c = void 0, l = t, s = r.apply(n, e);}function b(t) {var e = t - f;return void 0 === f || o <= e || e < 0 || v && u <= t - l;}function h() {var t,e,n = w();if (b(n)) return y(n);a = setTimeout(h, (e = o - ((t = n) - f), v ? m(e, u - (t - l)) : e));}function y(t) {return a = void 0, e && i ? p(t) : (i = c = void 0, s);}function n() {var t,e = w(),n = b(e);if (i = arguments, c = this, f = e, n) {if (void 0 === a) return l = t = f, a = setTimeout(h, o), d ? p(t) : s;if (v) return a = setTimeout(h, o), p(f);}return void 0 === a && (a = setTimeout(h, o)), s;}return o = E(o) || 0, x(t) && (d = !!t.leading, u = (v = "maxWait" in t) ? g(E(t.maxWait) || 0, o) : u, e = "trailing" in t ? !!t.trailing : e), n.cancel = function () {void 0 !== a && clearTimeout(a), i = f = c = a = void (l = 0);}, n.flush = function () {return void 0 === a ? s : y(w());}, n;};}).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});}, {}], 8: [function (t, e, n) {"use strict";var s = Object.getOwnPropertySymbols,a = Object.prototype.hasOwnProperty,f = Object.prototype.propertyIsEnumerable;e.exports = function () {try {if (!Object.assign) return !1;var t = new String("abc");if (t[5] = "de", "5" === Object.getOwnPropertyNames(t)[0]) return !1;for (var e = {}, n = 0; n < 10; n++) {e["_" + String.fromCharCode(n)] = n;}if ("0123456789" !== Object.getOwnPropertyNames(e).map(function (t) {return e[t];}).join("")) return !1;var r = {};return "abcdefghijklmnopqrst".split("").forEach(function (t) {r[t] = t;}), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("");} catch (t) {return !1;}}() ? Object.assign : function (t, e) {for (var n, r, o = function (t) {if (null == t) throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t);}(t), i = 1; i < arguments.length; i++) {for (var c in n = Object(arguments[i])) {a.call(n, c) && (o[c] = n[c]);}if (s) {r = s(n);for (var u = 0; u < r.length; u++) {f.call(n, r[u]) && (o[r[u]] = n[r[u]]);}}}return o;};}, {}], 9: [function (t, e, n) {"use strict";var c = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {return typeof t === "undefined" ? "undefined" : _typeof(t);} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);},u = t("object-assign"),s = t("../delegate"),a = t("../delegateAll"),f = /^(.+):delegate\((.+)\)$/,l = function l(t, e) {var n = t[e];return delete t[e], n;};e.exports = function (r, t) {var n = Object.keys(r).reduce(function (t, e) {var n = function (t, e) {var n,r,o = t.match(f);o && (t = o[1], n = o[2]), "object" === (void 0 === e ? "undefined" : c(e)) && (r = { capture: l(e, "capture"), passive: l(e, "passive") });var i = { selector: n, delegate: "object" === (void 0 === e ? "undefined" : c(e)) ? a(e) : n ? s(n, e) : e, options: r };return -1 < t.indexOf(" ") ? t.split(" ").map(function (t) {return u({ type: t }, i);}) : (i.type = t, [i]);}(e, r[e]);return t.concat(n);}, []);return u({ add: function add(e) {n.forEach(function (t) {e.addEventListener(t.type, t.delegate, t.options);});}, remove: function remove(e) {n.forEach(function (t) {e.removeEventListener(t.type, t.delegate, t.options);});} }, t);};}, { "../delegate": 11, "../delegateAll": 12, "object-assign": 8 }], 10: [function (t, e, n) {"use strict";e.exports = function (t) {return function (e) {return t.some(function (t) {return !1 === t.call(this, e);}, this);};};}, {}], 11: [function (t, e, n) {"use strict";t("element-closest"), e.exports = function (n, r) {return function (t) {var e = t.target.closest(n);if (e) return r.call(e, t);};};}, { "element-closest": 6 }], 12: [function (t, e, n) {"use strict";var r = t("../delegate"),o = t("../compose");e.exports = function (n) {var t = Object.keys(n);if (1 === t.length && "*" === t[0]) return n["*"];var e = t.reduce(function (t, e) {return t.push(r(e, n[e])), t;}, []);return o(e);};}, { "../compose": 10, "../delegate": 11 }], 13: [function (t, e, n) {"use strict";e.exports = function (e, n) {return function (t) {if (e !== t.target && !e.contains(t.target)) return n.call(this, t);};};}, {}], 14: [function (t, e, n) {"use strict";e.exports = function (e, n) {var r = function r(t) {return t.currentTarget.removeEventListener(t.type, r, n), e.call(this, t);};return r;};}, {}], 15: [function (t, e, n) {"use strict";var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {return typeof t === "undefined" ? "undefined" : _typeof(t);} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);},o = /(^\s+)|(\s+$)/g,i = /\s+/,c = String.prototype.trim ? function (t) {return t.trim();} : function (t) {return t.replace(o, "");};e.exports = function (t, e) {if ("string" != typeof t) throw new Error("Expected a string but got " + (void 0 === t ? "undefined" : r(t)));e || (e = window.document);var n = e.getElementById ? e.getElementById.bind(e) : function (t) {return this.querySelector('[id="' + t.replace(/"/g, '\\"') + '"]');}.bind(e);return 1 === (t = c(t).split(i)).length && "" === t[0] ? [] : t.map(function (t) {var e = n(t);if (!e) throw new Error('no element with id: "' + t + '"');return e;});};}, {}], 16: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var o = t("../utils/behavior"),i = t("array-filter"),c = t("array-foreach"),u = t("../utils/toggle"),s = t("../utils/is-in-viewport"),a = t("../events").CLICK,f = t("../config").prefix,l = "." + f + "-accordion, ." + f + "-accordion-bordered",d = "." + f + "-accordion-button[aria-controls]",v = "aria-expanded",p = function p(e, t) {var n = e.closest(l);if (!n) throw new Error(d + " is missing outer " + l);t = u(e, t);var r = "true" === n.getAttribute("aria-multiselectable");t && !r && c(y(n), function (t) {t !== e && u(t, !1);});},b = function b(t) {return p(t, !0);},h = function h(t) {return p(t, !1);},y = function y(e) {return i(e.querySelectorAll(d), function (t) {return t.closest(l) === e;});},g = o(r({}, a, r({}, d, function (t) {t.preventDefault(), p(this), "true" === this.getAttribute(v) && (s(this) || this.scrollIntoView());})), { init: function init(t) {c(t.querySelectorAll(d), function (t) {var e = "true" === t.getAttribute(v);p(t, e);});}, ACCORDION: l, BUTTON: d, show: b, hide: h, toggle: p, getButtons: y }),m = function m(t) {this.root = t, g.on(this.root);};t("object-assign")(m, g), m.prototype.show = b, m.prototype.hide = h, m.prototype.remove = function () {g.off(this.root);}, e.exports = m;}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/is-in-viewport": 31, "../utils/toggle": 35, "array-filter": 1, "array-foreach": 2, "object-assign": 8 }], 17: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var o = t("../utils/behavior"),i = (t("../utils/toggle"), t("../events").CLICK),c = t("../config").prefix,u = "." + c + "-banner-header",s = c + "-banner-header-expanded";e.exports = o(r({}, i, r({}, u + " [aria-controls]", function (t) {return t.preventDefault(), this.closest(u).classList.toggle(s), !1;})));}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/toggle": 35 }], 18: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}t("./accordion");var o = t("../utils/behavior"),i = t("lodash.debounce"),c = t("array-foreach"),u = t("../utils/select"),s = t("../events").CLICK,a = t("../config").prefix,f = "hidden",l = "." + a + "-footer-big" + " nav",d = l + " ." + a + "-footer-primary-link",v = l + " ul",p = i(function () {var e = window.innerWidth < 600;c(u(v), function (t) {t.classList.toggle(f, e);});}, 180);e.exports = o(r({}, s, r({}, d, function () {if (window.innerWidth < 600) {var e = this.closest(v);e.classList.toggle(f);var t = e.closest(l).querySelectorAll("ul");c(t, function (t) {t !== e && t.classList.add(f);});}})), { HIDE_MAX_WIDTH: 600, DEBOUNCE_RATE: 180, init: function init(t) {p(), window.addEventListener("resize", p);}, teardown: function teardown(t) {window.removeEventListener("resize", p);} });}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/select": 32, "./accordion": 16, "array-foreach": 2, "lodash.debounce": 7 }], 19: [function (t, e, n) {"use strict";e.exports = { accordion: t("./accordion"), banner: t("./banner"), footer: t("./footer"), navigation: t("./navigation"), password: t("./password"), search: t("./search"), skipnav: t("./skipnav"), validator: t("./validator") };}, { "./accordion": 16, "./banner": 17, "./footer": 18, "./navigation": 20, "./password": 21, "./search": 22, "./skipnav": 23, "./validator": 24 }], 20: [function (t, e, n) {"use strict";var r;function o(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var i = t("../utils/behavior"),c = t("array-foreach"),u = t("../utils/select"),s = t("./accordion"),a = t("../events").CLICK,f = t("../config").prefix,l = "." + f + "-nav",d = l + " a",v = "." + f + "-menu-btn",p = "." + f + "-nav-close",b = p + ", ." + f + "-overlay",h = [l, "." + f + "-overlay"].join(", "),y = "sfgov-mobile_nav-active",g = function g() {return document.body.classList.contains(y);},m = void 0,w = function w(e) {var t = document.body;"boolean" != typeof e && (e = !g()), t.classList.toggle(y, e), c(u(h), function (t) {t.classList.toggle("is-visible", e);}), e ? m.enable() : m.release();var n = t.querySelector(p),r = t.querySelector(v);return e && n ? n.focus() : !e && document.activeElement === n && r && r.focus(), e;},x = function x() {var t = document.body.querySelector(p);g() && t && 0 === t.getBoundingClientRect().width && w.call(t, !1);},E = i(o({}, a, (o(r = {}, v, w), o(r, b, w), o(r, d, function () {var t = this.closest(s.ACCORDION);t && s.getButtons(t).forEach(function (t) {return s.hide(t);}), g() && w.call(this, !1);}), r)), { init: function init() {var t = document.querySelector(l);t && (m = function (t) {var e = t.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]'),n = e[0],r = e[e.length - 1];function o(t) {9 === t.keyCode && (t.shiftKey ? document.activeElement === n && (t.preventDefault(), r.focus()) : document.activeElement === r && (t.preventDefault(), n.focus())), 27 === t.keyCode && w.call(this, !1);}return n.focus(), { enable: function enable() {t.addEventListener("keydown", o);}, release: function release() {t.removeEventListener("keydown", o);} };}(t)), x(), window.addEventListener("resize", x, !1);}, teardown: function teardown() {window.removeEventListener("resize", x, !1);} }),S = t("object-assign");e.exports = S(function (t) {return E.on(t);}, E);}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/select": 32, "./accordion": 16, "array-foreach": 2, "object-assign": 8 }], 21: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var o = t("../utils/behavior"),i = t("../utils/toggle-form-input"),c = t("../events").CLICK,u = t("../config").prefix,s = "." + u + "-show_password, ." + u + "-show_multipassword";e.exports = o(r({}, c, r({}, s, function (t) {t.preventDefault(), i(this);})));}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/toggle-form-input": 34 }], 22: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var o = t("../utils/behavior"),i = t("array-foreach"),c = t("receptor/ignore"),u = t("../utils/select"),s = t("../events").CLICK,a = t("../config").prefix,f = ".js-search-button",l = ".js-search-form",d = a + "-sr-only",v = void 0,p = function p(t, e) {var n,r = (n = t.closest("header")) ? n.querySelector(l) : document.querySelector(l);if (!r) throw new Error("No " + l + " found for search toggle in header!");if (t.hidden = e, r.classList.toggle(d, !e), e) {var o = r.querySelector("[type=search]");o && o.focus();var i = c(r, function (t) {v && function (t) {p(this, !1), v = void 0;}.call(v), document.body.removeEventListener(s, i);});setTimeout(function () {document.body.addEventListener(s, i);}, 0);}},b = o(r({}, s, r({}, f, function (t) {p(this, !0), v = this;})), { init: function init(t) {i(u(f, t), function (t) {p(t, !1);});}, teardown: function teardown(t) {v = void 0;} }),h = t("object-assign");e.exports = h(function (t) {return b.on(t);}, b);}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "../utils/select": 32, "array-foreach": 2, "object-assign": 8, "receptor/ignore": 13 }], 23: [function (t, e, n) {"use strict";function r(t, e, n) {return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;}var o = t("../utils/behavior"),i = t("receptor/once"),c = t("../events").CLICK,u = t("../config").prefix,s = "." + u + '-skipnav[href^="#"], .' + u + '-footer-return-to-top [href^="#"]';e.exports = o(r({}, c, r({}, s, function (t) {var e = this.getAttribute("href"),n = document.getElementById("#" === e ? "main-content" : e.slice(1));n && (n.style.outline = "0", n.setAttribute("tabindex", 0), n.focus(), n.addEventListener("blur", i(function (t) {n.setAttribute("tabindex", -1);})));})));}, { "../config": 25, "../events": 26, "../utils/behavior": 30, "receptor/once": 14 }], 24: [function (t, e, n) {"use strict";var r = t("../utils/behavior"),o = t("../utils/validate-input"),i = (t("lodash.debounce"), r({ "keyup change": { "input[data-validation-element]": function inputDataValidationElement(t) {return o(this);} } })),c = t("object-assign");e.exports = c(function (t) {return i.on(t);}, i);}, { "../utils/behavior": 30, "../utils/validate-input": 36, "lodash.debounce": 7, "object-assign": 8 }], 25: [function (t, e, n) {"use strict";e.exports = { prefix: "sfgov" };}, {}], 26: [function (t, e, n) {"use strict";e.exports = { CLICK: "click" };}, {}], 27: [function (t, e, n) {"use strict";var r = window.HTMLElement.prototype,o = "hidden";o in r || Object.defineProperty(r, o, { get: function get() {return this.hasAttribute(o);}, set: function set(t) {t ? this.setAttribute(o, "") : this.removeAttribute(o);} });}, {}], 28: [function (t, e, n) {"use strict";t("classlist-polyfill"), t("./element-hidden");}, { "./element-hidden": 27, "classlist-polyfill": 3 }], 29: [function (t, e, n) {"use strict";var r = t("domready");t("./polyfills");var o = t("./config"),i = t("./components");o.components = i, r(function () {var t = document.body;for (var e in i) {i[e].on(t);}}), e.exports = o;}, { "./components": 19, "./config": 25, "./polyfills": 28, domready: 4 }], 30: [function (t, e, n) {"use strict";var r = t("object-assign"),o = t("array-foreach"),i = t("receptor/behavior"),c = function c() {var t = [].slice.call(arguments);return function (e) {var n = this;e || (e = document.body), o(t, function (t) {"function" == typeof n[t] && n[t].call(n, e);});};};e.exports = function (t, e) {return i(t, r({ on: c("init", "add"), off: c("teardown", "remove") }, e));};}, { "array-foreach": 2, "object-assign": 8, "receptor/behavior": 9 }], 31: [function (t, e, n) {"use strict";e.exports = function (t) {var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : window,n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : document.documentElement,r = t.getBoundingClientRect();return 0 <= r.top && 0 <= r.left && r.bottom <= (e.innerHeight || n.clientHeight) && r.right <= (e.innerWidth || n.clientWidth);};}, {}], 32: [function (t, e, n) {"use strict";var o = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {return typeof t === "undefined" ? "undefined" : _typeof(t);} : function (t) {return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);};e.exports = function (t, e) {if ("string" != typeof t) return [];var n;e && (n = e) && "object" === (void 0 === n ? "undefined" : o(n)) && 1 === n.nodeType || (e = window.document);var r = e.querySelectorAll(t);return Array.prototype.slice.call(r);};}, {}], 33: [function (t, e, n) {"use strict";e.exports = function (t, e) {t.setAttribute("autocapitalize", "off"), t.setAttribute("autocorrect", "off"), t.setAttribute("type", e ? "password" : "text");};}, {}], 34: [function (t, e, n) {"use strict";var i = t("array-foreach"),c = t("resolve-id-refs"),u = (t("./select"), t("./toggle-field-mask")),s = "aria-pressed",a = "data-show-text";e.exports = function (t) {var e = t.hasAttribute(s) && "true" !== t.getAttribute(s),n = c(t.getAttribute("aria-controls"));i(n, function (t) {return u(t, e);}), t.hasAttribute(a) || t.setAttribute(a, t.textContent);var r = t.getAttribute(a),o = t.getAttribute("data-hide-text") || r.replace(/\bShow\b/i, function (t) {return ("S" === t[0] ? "H" : "h") + "ide";});return t.textContent = e ? r : o, t.setAttribute(s, e), e;};}, { "./select": 32, "./toggle-field-mask": 33, "array-foreach": 2, "resolve-id-refs": 15 }], 35: [function (t, e, n) {"use strict";var o = "aria-expanded";e.exports = function (t, e) {"boolean" != typeof e && (e = "false" === t.getAttribute(o)), t.setAttribute(o, e);var n = t.getAttribute("aria-controls"),r = document.getElementById(n);if (!r) throw new Error('No toggle target found with id: "' + n + '"');return r.setAttribute("aria-hidden", !e), e;};}, {}], 36: [function (t, e, n) {"use strict";var f = t("elem-dataset"),r = t("../config").prefix,l = r + "-checklist-checked";e.exports = function (t) {var e = f(t),n = e.validationElement,r = "#" === n.charAt(0) ? document.querySelector(n) : document.getElementById(n);if (!r) throw new Error('No validation element found with id: "' + n + '"');for (var o in e) {if (o.startsWith("validate")) {var i = o.substr("validate".length).toLowerCase(),c = new RegExp(e[o]),u = '[data-validator="' + i + '"]',s = r.querySelector(u);if (!s) throw new Error('No validator checkbox found for: "' + i + '"');var a = c.test(t.value);s.classList.toggle(l, a), s.setAttribute("aria-checked", a);}}};}, { "../config": 25, "elem-dataset": 5 }] }, {}, [29]);
//# sourceMappingURL=uswds.min.js.map
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var filter = require('array-filter');
var forEach = require('array-foreach');
var toggle = require('../utils/toggle');
var isElementInViewport = require('../utils/is-in-viewport');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

// XXX match .usa-accordion and .usa-accordion-bordered
var ACCORDION = '.' + PREFIX + '-accordion, .' + PREFIX + '-accordion-bordered';
var BUTTON = '.' + PREFIX + '-accordion-button[aria-controls]';
var EXPANDED = 'aria-expanded';
var MULTISELECTABLE = 'aria-multiselectable';

/**
                                               * Toggle a button's "pressed" state, optionally providing a target
                                               * state.
                                               *
                                               * @param {HTMLButtonElement} button
                                               * @param {boolean?} expanded If no state is provided, the current
                                               * state will be toggled (from false to true, and vice-versa).
                                               * @return {boolean} the resulting state
                                               */
var toggleButton = function toggleButton(button, expanded) {
  var accordion = button.closest(ACCORDION);
  if (!accordion) {
    throw new Error(BUTTON + ' is missing outer ' + ACCORDION);
  }

  expanded = toggle(button, expanded);
  // XXX multiselectable is opt-in, to preserve legacy behavior
  var multiselectable = accordion.getAttribute(MULTISELECTABLE) === 'true';

  if (expanded && !multiselectable) {
    forEach(getAccordionButtons(accordion), function (other) {
      if (other !== button) {
        toggle(other, false);
      }
    });
  }
};

/**
    * @param {HTMLButtonElement} button
    * @return {boolean} true
    */
var showButton = function showButton(button) {return toggleButton(button, true);};

/**
                                                                                    * @param {HTMLButtonElement} button
                                                                                    * @return {boolean} false
                                                                                    */
var hideButton = function hideButton(button) {return toggleButton(button, false);};

/**
                                                                                     * Get an Array of button elements belonging directly to the given
                                                                                     * accordion element.
                                                                                     * @param {HTMLElement} accordion
                                                                                     * @return {array<HTMLButtonElement>}
                                                                                     */
var getAccordionButtons = function getAccordionButtons(accordion) {
  return filter(accordion.querySelectorAll(BUTTON), function (button) {
    return button.closest(ACCORDION) === accordion;
  });
};

var accordion = behavior(_defineProperty({},
CLICK, _defineProperty({},
BUTTON, function (event) {
  event.preventDefault();
  toggleButton(this);

  if (this.getAttribute(EXPANDED) === 'true') {
    // We were just expanded, but if another accordion was also just
    // collapsed, we may no longer be in the viewport. This ensures
    // that we are still visible, so the user isn't confused.
    if (!isElementInViewport(this)) this.scrollIntoView();
  }
})),

{
  init: function init(root) {
    forEach(root.querySelectorAll(BUTTON), function (button) {
      var expanded = button.getAttribute(EXPANDED) === 'true';
      toggleButton(button, expanded);
    });
  },
  ACCORDION: ACCORDION,
  BUTTON: BUTTON,
  show: showButton,
  hide: hideButton,
  toggle: toggleButton,
  getButtons: getAccordionButtons });


/**
                                       * TODO: for 2.0, remove everything below this comment and export the
                                       * behavior directly:
                                       *
                                       * module.exports = behavior({...});
                                       */
var Accordion = function Accordion(root) {
  this.root = root;
  accordion.on(this.root);
};

// copy all of the behavior methods and props to Accordion
var assign = require('object-assign');
assign(Accordion, accordion);

Accordion.prototype.show = showButton;
Accordion.prototype.hide = hideButton;

Accordion.prototype.remove = function () {
  accordion.off(this.root);
};

module.exports = Accordion;
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var toggle = require('../utils/toggle');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

var HEADER = '.' + PREFIX + '-banner-header';
var EXPANDED_CLASS = PREFIX + '-banner-header-expanded';

var toggleBanner = function toggleBanner(event) {
  event.preventDefault();
  this.closest(HEADER).classList.toggle(EXPANDED_CLASS);
  return false;
};

module.exports = behavior(_defineProperty({},
CLICK, _defineProperty({},
HEADER + ' [aria-controls]', toggleBanner)));
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var accordion = require('./accordion');
var behavior = require('../utils/behavior');
var debounce = require('lodash.debounce');
var forEach = require('array-foreach');
var select = require('../utils/select');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

var HIDDEN = 'hidden';
var SCOPE = '.' + PREFIX + '-footer-big';
var NAV = SCOPE + ' nav';
var BUTTON = NAV + ' .' + PREFIX + '-footer-primary-link';
var LIST = NAV + ' ul';

var HIDE_MAX_WIDTH = 600;
var DEBOUNCE_RATE = 180;

var showPanel = function showPanel() {
  if (window.innerWidth < HIDE_MAX_WIDTH) {
    var list = this.closest(LIST);
    list.classList.toggle(HIDDEN);

    // NB: this *should* always succeed because the button
    // selector is scoped to ".{prefix}-footer-big nav"
    var lists = list.closest(NAV).
    querySelectorAll('ul');

    forEach(lists, function (el) {
      if (el !== list) {
        el.classList.add(HIDDEN);
      }
    });
  }
};

var resize = debounce(function () {
  var hidden = window.innerWidth < HIDE_MAX_WIDTH;
  forEach(select(LIST), function (list) {
    list.classList.toggle(HIDDEN, hidden);
  });
}, DEBOUNCE_RATE);

module.exports = behavior(_defineProperty({},
CLICK, _defineProperty({},
BUTTON, showPanel)),

{
  // export for use elsewhere
  HIDE_MAX_WIDTH: HIDE_MAX_WIDTH,
  DEBOUNCE_RATE: DEBOUNCE_RATE,

  init: function init(target) {
    resize();
    window.addEventListener('resize', resize);
  },

  teardown: function teardown(target) {
    window.removeEventListener('resize', resize);
  } });
'use strict';module.exports = {
  accordion: require('./accordion'),
  banner: require('./banner'),
  footer: require('./footer'),
  navigation: require('./navigation'),
  password: require('./password'),
  search: require('./search'),
  skipnav: require('./skipnav'),
  validator: require('./validator') };
'use strict';var _CLICK;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var forEach = require('array-foreach');
var select = require('../utils/select');
var accordion = require('./accordion');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

var NAV = '.' + PREFIX + '-nav';
var NAV_LINKS = NAV + ' a';
var OPENERS = '.' + PREFIX + '-menu-btn';
var CLOSE_BUTTON = '.' + PREFIX + '-nav-close';
var OVERLAY = '.' + PREFIX + '-overlay';
var CLOSERS = CLOSE_BUTTON + ', .' + PREFIX + '-overlay';
var TOGGLES = [NAV, OVERLAY].join(', ');

var ACTIVE_CLASS = 'sfgov-mobile_nav-active';
var VISIBLE_CLASS = 'is-visible';

var isActive = function isActive() {return document.body.classList.contains(ACTIVE_CLASS);};

var _focusTrap = function _focusTrap(trapContainer) {
  // Find all focusable children
  var focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
  var focusableElements = trapContainer.querySelectorAll(focusableElementsString);
  var firstTabStop = focusableElements[0];
  var lastTabStop = focusableElements[focusableElements.length - 1];

  function trapTabKey(e) {
    // Check for TAB key press
    if (e.keyCode === 9) {

      // SHIFT + TAB
      if (e.shiftKey) {
        if (document.activeElement === firstTabStop) {
          e.preventDefault();
          lastTabStop.focus();
        }

        // TAB
      } else {
        if (document.activeElement === lastTabStop) {
          e.preventDefault();
          firstTabStop.focus();
        }
      }
    }

    // ESCAPE
    if (e.keyCode === 27) {
      toggleNav.call(this, false);
    }
  }

  // Focus first child
  firstTabStop.focus();

  return {
    enable: function enable() {
      // Listen for and trap the keyboard
      trapContainer.addEventListener('keydown', trapTabKey);
    },

    release: function release() {
      trapContainer.removeEventListener('keydown', trapTabKey);
    } };

};

var focusTrap = void 0;

var toggleNav = function toggleNav(active) {
  var body = document.body;
  if (typeof active !== 'boolean') {
    active = !isActive();
  }
  body.classList.toggle(ACTIVE_CLASS, active);

  forEach(select(TOGGLES), function (el) {
    el.classList.toggle(VISIBLE_CLASS, active);
  });

  if (active) {
    focusTrap.enable();
  } else {
    focusTrap.release();
  }

  var closeButton = body.querySelector(CLOSE_BUTTON);
  var menuButton = body.querySelector(OPENERS);

  if (active && closeButton) {
    // The mobile nav was just activated, so focus on the close button,
    // which is just before all the nav elements in the tab order.
    closeButton.focus();
  } else if (!active && document.activeElement === closeButton &&
  menuButton) {
    // The mobile nav was just deactivated, and focus was on the close
    // button, which is no longer visible. We don't want the focus to
    // disappear into the void, so focus on the menu button if it's
    // visible (this may have been what the user was just focused on,
    // if they triggered the mobile nav by mistake).
    menuButton.focus();
  }

  return active;
};

var resize = function resize() {
  var closer = document.body.querySelector(CLOSE_BUTTON);

  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {
    // The mobile nav is active, but the close box isn't visible, which
    // means the user's viewport has been resized so that it is no longer
    // in mobile mode. Let's make the page state consistent by
    // deactivating the mobile nav.
    toggleNav.call(closer, false);
  }
};

var navigation = behavior(_defineProperty({},
CLICK, (_CLICK = {}, _defineProperty(_CLICK,
OPENERS, toggleNav), _defineProperty(_CLICK,
CLOSERS, toggleNav), _defineProperty(_CLICK,
NAV_LINKS, function () {
  // A navigation link has been clicked! We want to collapse any
  // hierarchical navigation UI it's a part of, so that the user
  // can focus on whatever they've just selected.

  // Some navigation links are inside accordions; when they're
  // clicked, we want to collapse those accordions.
  var acc = this.closest(accordion.ACCORDION);
  if (acc) {
    accordion.getButtons(acc).forEach(function (btn) {return accordion.hide(btn);});
  }

  // If the mobile navigation menu is active, we want to hide it.
  if (isActive()) {
    toggleNav.call(this, false);
  }
}), _CLICK)),

{
  init: function init() {
    var trapContainer = document.querySelector(NAV);

    if (trapContainer) {
      focusTrap = _focusTrap(trapContainer);
    }

    resize();
    window.addEventListener('resize', resize, false);
  },
  teardown: function teardown() {
    window.removeEventListener('resize', resize, false);
  } });


/**
         * TODO for 2.0, remove this statement and export `navigation` directly:
         *
         * module.exports = behavior({...});
         */
var assign = require('object-assign');
module.exports = assign(
function (el) {return navigation.on(el);},
navigation);
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var toggleFormInput = require('../utils/toggle-form-input');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

var LINK = '.' + PREFIX + '-show_password, .' + PREFIX + '-show_multipassword';

var toggle = function toggle(event) {
  event.preventDefault();
  toggleFormInput(this);
};

module.exports = behavior(_defineProperty({},
CLICK, _defineProperty({},
LINK, toggle)));
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var forEach = require('array-foreach');
var ignore = require('receptor/ignore');
var select = require('../utils/select');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;

var BUTTON = '.js-search-button';
var FORM = '.js-search-form';
var INPUT = '[type=search]';
var CONTEXT = 'header'; // XXX
var VISUALLY_HIDDEN = PREFIX + '-sr-only';

var lastButton = void 0;

var showSearch = function showSearch(event) {
  toggleSearch(this, true);
  lastButton = this;
};

var hideSearch = function hideSearch(event) {
  toggleSearch(this, false);
  lastButton = undefined;
};

var getForm = function getForm(button) {
  var context = button.closest(CONTEXT);
  return context ?
  context.querySelector(FORM) :
  document.querySelector(FORM);
};

var toggleSearch = function toggleSearch(button, active) {
  var form = getForm(button);
  if (!form) {
    throw new Error('No ' + FORM + ' found for search toggle in ' + CONTEXT + '!');
  }

  button.hidden = active;
  form.classList.toggle(VISUALLY_HIDDEN, !active);

  if (active) {
    var input = form.querySelector(INPUT);
    if (input) {
      input.focus();
    }
    // when the user clicks _outside_ of the form w/ignore(): hide the
    // search, then remove the listener
    var listener = ignore(form, function (e) {
      if (lastButton) {
        hideSearch.call(lastButton);
      }
      document.body.removeEventListener(CLICK, listener);
    });

    // Normally we would just run this code without a timeout, but
    // IE11 and Edge will actually call the listener *immediately* because
    // they are currently handling this exact type of event, so we'll
    // make sure the browser is done handling the current click event,
    // if any, before we attach the listener.
    setTimeout(function () {
      document.body.addEventListener(CLICK, listener);
    }, 0);
  }
};

var search = behavior(_defineProperty({},
CLICK, _defineProperty({},
BUTTON, showSearch)),

{
  init: function init(target) {
    forEach(select(BUTTON, target), function (button) {
      toggleSearch(button, false);
    });
  },
  teardown: function teardown(target) {
    // forget the last button clicked
    lastButton = undefined;
  } });


/**
         * TODO for 2.0, remove this statement and export `navigation` directly:
         *
         * module.exports = behavior({...});
         */
var assign = require('object-assign');
module.exports = assign(
function (el) {return search.on(el);},
search);
'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
var behavior = require('../utils/behavior');
var once = require('receptor/once');

var CLICK = require('../events').CLICK;
var PREFIX = require('../config').prefix;
var LINK = '.' + PREFIX + '-skipnav[href^="#"], .' + PREFIX + '-footer-return-to-top [href^="#"]';
var MAINCONTENT = 'main-content';

var setTabindex = function setTabindex(event) {
  // NB: we know because of the selector we're delegating to below that the
  // href already begins with '#'
  var id = this.getAttribute('href');
  var target = document.getElementById(id === '#' ? MAINCONTENT : id.slice(1));

  if (target) {
    target.style.outline = '0';
    target.setAttribute('tabindex', 0);
    target.focus();
    target.addEventListener('blur', once(function (event) {
      target.setAttribute('tabindex', -1);
    }));
  } else {
    // throw an error?
  }
};

module.exports = behavior(_defineProperty({},
CLICK, _defineProperty({},
LINK, setTabindex)));
'use strict'; // TODO: remove this file in 2.0
var toggleFieldMask = require('../utils/toggle-field-mask');
var forEach = require('array-foreach');

module.exports = function (fields, mask) {
  forEach(fields, function (field) {return toggleFieldMask(field, mask);});
};
'use strict'; // TODO: remove this file in 2.0
var toggleFormInput = require('../utils/toggle-form-input');
var resolveIdRefs = require('resolve-id-refs');

module.exports = function (control, showText, hideText) {
  /*
                                                         if (showText && hideText) {
                                                           console.warn(
                                                             'toggleFormInput() with 2 or more arguments will be deprecated in v2.0!',
                                                             'Use the data-show-text and data-hide-text attributes instead.'
                                                           );
                                                         }
                                                         */
  control.addEventListener('click', function (e) {
    toggleFormInput(control);
  });
};
'use strict';
var behavior = require('../utils/behavior');
var validate = require('../utils/validate-input');
var debounce = require('lodash.debounce');

var change = function change(event) {
  return validate(this);
};

var validator = behavior({
  'keyup change': {
    'input[data-validation-element]': change } });



/**
                                                    * TODO for 2.0, remove this statement and export `navigation` directly:
                                                    *
                                                    * module.exports = behavior({...});
                                                    */
var assign = require('object-assign');
module.exports = assign(
function (el) {return validator.on(el);},
validator);
'use strict';
var elproto = window.HTMLElement.prototype;
var HIDDEN = 'hidden';

if (!(HIDDEN in elproto)) {
  Object.defineProperty(elproto, HIDDEN, {
    get: function get() {
      return this.hasAttribute(HIDDEN);
    },
    set: function set(value) {
      if (value) {
        this.setAttribute(HIDDEN, '');
      } else {
        this.removeAttribute(HIDDEN);
      }
    } });

}
'use strict';
// polyfills HTMLElement.prototype.classList and DOMTokenList
require('classlist-polyfill');
// polyfills HTMLElement.prototype.hidden
require('./element-hidden');
'use strict';
var assign = require('object-assign');
var forEach = require('array-foreach');
var Behavior = require('receptor/behavior');

var sequence = function sequence() {
  var seq = [].slice.call(arguments);
  return function (target) {var _this = this;
    if (!target) {
      target = document.body;
    }
    forEach(seq, function (method) {
      if (typeof _this[method] === 'function') {
        _this[method].call(_this, target);
      }
    });
  };
};

/**
    * @name behavior
    * @param {object} events
    * @param {object?} props
    * @return {receptor.behavior}
    */
module.exports = function (events, props) {
  return Behavior(events, assign({
    on: sequence('init', 'add'),
    off: sequence('teardown', 'remove') },
  props));
};
'use strict';module.exports = function (element, eventTypeString, listener, options) {
  var eventTypes = eventTypeString.split(/\s+/);

  var add = function add() {
    eventTypes.forEach(function (type) {
      element.addEventListener(type, listener, options);
    });
  };

  var trigger = function trigger() {
    var type = eventTypes[0];
    var event = document.createEvent('HTMLEvents');
    event.initEvent(type, false, true);
    element.dispatchEvent(event);
  };

  var remove = function remove() {
    eventTypes.forEach(function (type) {
      element.removeEventListener(type, listener, options);
    });
  };

  add();

  return {
    on: add,
    trigger: trigger,
    off: remove };

};
"use strict"; // https://stackoverflow.com/a/7557433
function isElementInViewport(el)
{var win = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;var docEl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.documentElement;
  var rect = el.getBoundingClientRect();

  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (win.innerHeight || docEl.clientHeight) &&
    rect.right <= (win.innerWidth || docEl.clientWidth));

}

module.exports = isElementInViewport;
'use strict';

/**
               * @name isElement
               * @desc returns whether or not the given argument is a DOM element.
               * @param {any} value
               * @return {boolean}
               */var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};
var isElement = function isElement(value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.nodeType === 1;
};

/**
    * @name select
    * @desc selects elements from the DOM by class selector or ID selector.
    * @param {string} selector - The selector to traverse the DOM with.
    * @param {Document|HTMLElement?} context - The context to traverse the DOM
    *   in. If not provided, it defaults to the document.
    * @return {HTMLElement[]} - An array of DOM nodes or an empty array.
    */
module.exports = function select(selector, context) {

  if (typeof selector !== 'string') {
    return [];
  }

  if (!context || !isElement(context)) {
    context = window.document;
  }

  var selection = context.querySelectorAll(selector);
  return Array.prototype.slice.call(selection);
};
'use strict'; /**
               * Flips given INPUT elements between masked (hiding the field value) and unmasked
               * @param {Array.HTMLElement} fields - An array of INPUT elements
               * @param {Boolean} mask - Whether the mask should be applied, hiding the field value
               */
module.exports = function (field, mask) {
  field.setAttribute('autocapitalize', 'off');
  field.setAttribute('autocorrect', 'off');
  field.setAttribute('type', mask ? 'password' : 'text');
};
'use strict';
var forEach = require('array-foreach');
var resolveIdRefs = require('resolve-id-refs');
var select = require('./select');
var toggleFieldMask = require('./toggle-field-mask');

var CONTROLS = 'aria-controls';
var PRESSED = 'aria-pressed';
var SHOW_ATTR = 'data-show-text';
var HIDE_ATTR = 'data-hide-text';

/**
                                   * Replace the word "Show" (or "show") with "Hide" (or "hide") in a string.
                                   * @param {string} showText
                                   * @return {strong} hideText
                                   */
var getHideText = function getHideText(showText) {
  return showText.replace(/\bShow\b/i, function (show) {
    return ('S' === show[0] ? 'H' : 'h') + 'ide';
  });
};

/**
    * Component that decorates an HTML element with the ability to toggle the
    * masked state of an input field (like a password) when clicked.
    * The ids of the fields to be masked will be pulled directly from the button's
    * `aria-controls` attribute.
    *
    * @param  {HTMLElement} el    Parent element containing the fields to be masked
    * @return {boolean}
    */
module.exports = function (el) {
  // this is the *target* state:
  // * if the element has the attr and it's !== "true", pressed is true
  // * otherwise, pressed is false
  var pressed = el.hasAttribute(PRESSED) &&
  el.getAttribute(PRESSED) !== 'true';

  var fields = resolveIdRefs(el.getAttribute(CONTROLS));
  forEach(fields, function (field) {return toggleFieldMask(field, pressed);});

  if (!el.hasAttribute(SHOW_ATTR)) {
    el.setAttribute(SHOW_ATTR, el.textContent);
  }

  var showText = el.getAttribute(SHOW_ATTR);
  var hideText = el.getAttribute(HIDE_ATTR) || getHideText(showText);

  el.textContent = pressed ? showText : hideText;
  el.setAttribute(PRESSED, pressed);
  return pressed;
};
'use strict';
var EXPANDED = 'aria-expanded';
var CONTROLS = 'aria-controls';
var HIDDEN = 'aria-hidden';

module.exports = function (button, expanded) {

  if (typeof expanded !== 'boolean') {
    expanded = button.getAttribute(EXPANDED) === 'false';
  }
  button.setAttribute(EXPANDED, expanded);

  var id = button.getAttribute(CONTROLS);
  var controls = document.getElementById(id);
  if (!controls) {
    throw new Error(
    'No toggle target found with id: "' + id + '"');

  }

  controls.setAttribute(HIDDEN, !expanded);
  return expanded;
};
'use strict';
var dataset = require('elem-dataset');

var PREFIX = require('../config').prefix;
var CHECKED = 'aria-checked';
var CHECKED_CLASS = PREFIX + '-checklist-checked';

module.exports = function validate(el) {
  var data = dataset(el);
  var id = data.validationElement;
  var checkList = id.charAt(0) === '#' ?
  document.querySelector(id) :
  document.getElementById(id);

  if (!checkList) {
    throw new Error('No validation element found with id: "' +
    id + '"');

  }

  for (var key in data) {
    if (key.startsWith('validate')) {
      var validatorName = key.substr('validate'.length).toLowerCase();
      var validatorPattern = new RegExp(data[key]);
      var validatorSelector = '[data-validator="' + validatorName + '"]';
      var validatorCheckbox = checkList.querySelector(validatorSelector);
      if (!validatorCheckbox) {
        throw new Error('No validator checkbox found for: "' +
        validatorName + '"');

      }

      var checked = validatorPattern.test(el.value);
      validatorCheckbox.classList.toggle(CHECKED_CLASS, checked);
      validatorCheckbox.setAttribute(CHECKED, checked);
    }
  }
};
'use strict'; // TODO: remove this file in v2.0
module.exports = require('domready');
//# sourceMappingURL=data:application/json;charset=utf8;base64,
