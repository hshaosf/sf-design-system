{"version":3,"sources":["../../node_modules/gutter-grid/grid-classes.scss","../../node_modules/gutter-grid/grid-shared-mixins.scss","../../node_modules/mq-scss/_mq.scss","overrides/02-molecules/01-blocks/04-a-z-block.scss","core/_mixins.scss","core/_variables.scss"],"names":[],"mappings":"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","file":"04-a-z-block.css","sourcesContent":["\r\n//================================================*\\\r\n//*\tGRID STYLING FILE\t\t\t\t\t\t*/\r\n//----------------------------------------------------\r\n//\tThis file holds the code that generates the\r\n//\tclasses for the grid system.\r\n//\r\n//\tDO NOT EDIT THIS FILE UNLESS YOU REALLY KNOW\r\n//\tWHAT YOU'RE DOING!\r\n//================================================*/\r\n\r\n//Default settings\r\n@import 'grid-settings';\r\n\r\n@import 'grid-shared-mixins';\r\n\r\n$fullPrefix: if($grid-prefix != '', $grid-prefix+'-', '');\r\n\r\n//================================================*\\\r\n//*\t\t\t\tGRID WIDTHS\t\t\t\t\t\t*/\r\n//----------------------------------------------------\r\n//\tQuickly and easily apply standard percentage\r\n//\twidths to grid cells based on fractions.\r\n//\r\n//\tstep 1: give container the width modifier class.\r\n//\t\t\teg: grid--thirds\r\n//\tstep 2: give extra wide grid span classes\r\n//\t\t\teg. grid__cell--span2\r\n//\tWARNING: using a span class will likely require additional\r\n//\t\t\t styling for tablets and smaller devices\r\n//\r\n//\tEXAMPLE HTML:\r\n//\t<ul class=\"grid grid--cols-3\">\r\n//\t\t<li class=\"grid__cell\">Column is 1/3 wide on desktop</li>\r\n//\t\t<li class=\"grid__cell grid__cell--span-2\">column is 2/3 wide on desktop</li>\r\n//\t</ul>\r\n//================================================*/\r\n\r\n@for $i from 1 through length($grid-bp-list) {\r\n\t$columnWidth: column-width($i);\r\n\t$breaks: map-get($grid-bp-list, $i);\r\n\r\n\t//sets the default grid__cell widths\r\n\t.#{$fullPrefix}grid--cols-#{$i} {\r\n\t\t> * {\r\n\t\t\twidth: $columnWidth;\r\n\t\t}\r\n\r\n\t\t//.grid__cell--span-# styling\r\n\t\t@if ($i > 1){\r\n\t\t\t@for $x from 2 through $i {\r\n\t\t\t\t> .#{$fullPrefix}grid__cell--span-#{$x} {\r\n\t\t\t\t\t@if ($grid-calc-support) {\r\n\t\t\t\t\t\twidth: calc(#{$x} / #{$i} * 100%);\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\twidth: $x / $i * 100%;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Applies the media queries for the break points\r\n\t\t&:not(.#{$fullPrefix}grid--noMQs) {\r\n\t\t\t> *:not([class*=\"cell--span-\"]) {\r\n\t\t\t\t@include generate-column-breakpoints($breaks);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//base grid styling\r\n.#{$fullPrefix}grid {\r\n\t$grid: &;\r\n\r\n\t-gutter-grid-: grid;\r\n\tbox-sizing: border-box;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tmin-width: 100%;\r\n\tborder: 0 solid transparent;\r\n\tdisplay: flex;\r\n\talign-content: stretch;\r\n\r\n\t@if (not $grid-legacy-support){\r\n\t\t//By default grids will not wrap unless there is a column setting\r\n\t\t&[class*=\"grid--cols\"]:not(#{$grid}--noWrap){\r\n\t\t\tflex-wrap: wrap;\r\n\t\t}\r\n\t}\r\n\r\n\t// grid__wrapper styling... really only necessary for use with grid--gutter-#\r\n\t// fixes\r\n\t&__wrapper {\r\n\t\tpadding-bottom: 0.1px;\r\n\t}\r\n\r\n\t$stretch-grid-parameters: ':not([class*=\"grid--cols\"]):not(#{&}--noStretch):not([class*=\"grid--align-\"]):not([class*=\"grid--space-\"]):not(#{&}--noResize)';\r\n\t$stretch-cell-parameters: '#{&}__cell:not(#{&}__cell--noStretch):not(#{&}__cell--noResize)';\r\n\r\n\t&#{$stretch-grid-parameters} > #{$stretch-cell-parameters} {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t//base grid__cell styling\r\n\t&__cell {\r\n\t\t-gutter-grid-: cell;\r\n\t\tbox-sizing: border-box;\r\n\t\tmin-width: 0%;\r\n\t\tmax-width: 100%;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t\tbackground-clip: padding-box!important;\r\n\t\tborder: 0 solid transparent;\r\n\r\n\t\t&[class*=\"cell--span-\"] {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\r\n\t\t&.#{$fullPrefix}grid { display: flex; }\r\n\r\n\t\t&, * > {\r\n\t\t\t//helps fix IE10 word-wrap bug (elements need to not be display:inline for the fix to work though)\r\n\t\t\tmax-width: 100%;\r\n\t\t\tflex-shrink: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t//base grid__inner styling\r\n\t&__inner {\r\n\t\t-gutter-grid-: inner;\r\n\t\tdisplay: block;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t@each $class, $gutter in $grid-cell-gutters {\r\n\t\t&--gutter-#{$class} {\r\n\t\t\t@include parse-gutter-data($gutter, 'classes');\r\n\t\t}\r\n\t}\r\n\r\n\t//grid--outerGutters-# styling\r\n\t&--outerGutters {\r\n\t\tmargin: 0;\r\n\t\t&-v {\r\n\t\t\tmargin-top: 0;\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\t\t&-h {\r\n\t\t\tmargin-left: 0;\r\n\t\t\tmargin-right: 0;\r\n\t\t}\r\n\t\t&-top {\r\n\t\t\tmargin-top: 0;\r\n\t\t}\r\n\t\t&-bottom {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\t\t&-left {\r\n\t\t\tmargin-left: 0;\r\n\t\t}\r\n\t\t&-right {\r\n\t\t\tmargin-right: 0;\r\n\t\t}\r\n\r\n\t\t@if ($grid-legacy-support) {\r\n\t\t\t.lt-ie9 & {\r\n\t\t\t\t> *, & {\r\n\t\t\t\t\tborder-color: $grid-gutter-ie-fallback;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//hasInners makes grid__inner elements take up the full height of the grid cell\r\n\t&--hasInners {\r\n\t\t//grid__cell\r\n\t\t> * {\r\n\t\t\tdisplay: flex;\r\n\t\t\talign-items: stretch;\r\n\r\n\t\t\t//grid__inner\r\n\t\t\t> * {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\r\n\t\t\t\t&.#{$fullPrefix}grid {\r\n\t\t\t\t\tdisplay: flex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&--vAlign {\r\n\t\t&-center {\r\n\t\t\talign-items: center;\r\n\t\t}\r\n\t\t&-top {\r\n\t\t\talign-items: flex-start;\r\n\t\t}\r\n\t\t&-bottom {\r\n\t\t\talign-items: flex-end;\r\n\t\t}\r\n\t}\r\n\r\n\t&--vertical {\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t&--stretch {\r\n\t\t> * {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\t}\r\n\t&--noStretch {\r\n\t\t> * {\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\t&--noShrink {\r\n\t\t> * { flex-shrink: 0; }\r\n\t}\r\n\t&--noResize {\r\n\t\t> * {\r\n\t\t\tflex-shrink: 0;\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//allows a grid to be set at something other than 100% of it's parents width\r\n\t&--mini {\r\n\t\tmin-width: 0;\r\n\t}\r\n\r\n\t//allows columns to wrap after screen hits the edge of the design\r\n\t@include mq(max, $grid-page-width){\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\r\n\t//Unfortunately this is a necessity for IE compatibility\r\n\t//allows wrapping at all screen widths\r\n\t&--wrap {\r\n\t\tflex-wrap: wrap;\r\n\t\t// @include ieFloat;\r\n\t}\r\n\t//disables wrapping at all screen widths\r\n\t&--noWrap {\r\n\t\tflex-wrap: if($grid-legacy-support, nowrap !important, nowrap);\r\n\t}\r\n\r\n\t//quick access to space-between and space-around\r\n\t&--space {\r\n\t\t&-between, &-around {\r\n\t\t\t> * { flex-grow: 0; }\r\n\t\t}\r\n\t\t&-between {\r\n\t\t\tjustify-content: space-between;\r\n\t\t}\r\n\t\t&-around {\r\n\t\t\tjustify-content: space-around;\r\n\t\t}\r\n\t\t&-evenly {\r\n\t\t\t//backup for browsers that don't support \"space-evenly\"\r\n\t\t\tjustify-content: space-around;\r\n\t\t\tjustify-content: space-evenly;\r\n\t\t}\r\n\t}\r\n\r\n\t//quick access to left,center and right alignments\r\n\t&--align {\r\n\t\t&-left, &-center, &-right {\r\n\t\t\t> * { flex-grow: 0; }\r\n\t\t}\r\n\t\t&-left {\r\n\t\t\tjustify-content: flex-start;\r\n\t\t}\r\n\t\t&-center {\r\n\t\t\tjustify-content: center;\r\n\t\t}\r\n\t\t&-right {\r\n\t\t\tjustify-content: flex-end;\r\n\t\t}\r\n\t\t&-stretch {\r\n\t\t\t> * { flex-grow: 1; }\r\n\t\t}\r\n\t}\r\n\r\n\t&__cell {\r\n\t\t//cell vertical alignment\r\n\t\t&--vAlign {\r\n\t\t\t&-center {\r\n\t\t\t\talign-self: center;\r\n\t\t\t}\r\n\t\t\t&-top {\r\n\t\t\t\talign-self: flex-start;\r\n\t\t\t}\r\n\t\t\t&-bottom {\r\n\t\t\t\talign-self: flex-end;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Stretch and shrink\r\n\t\t&--stretch {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\t\t&--noStretch {\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t\t&--noShrink {\r\n\t\t\tflex-shrink: 0;\r\n\t\t}\r\n\t\t&--noResize {\r\n\t\t\tflex-shrink: 0;\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//tabular/float:left backup for IE9 and below\r\n\t@if ($grid-legacy-support) {\r\n\r\n\t\t&[class*=\"grid--align\"], &[class*=\"grid--space\"], #{$grid}--noStretch, #{$grid}--noResize, &[class*=\"grid--vAlign\"][class*=\"grid--cols\"] {\r\n\t\t\tflex-wrap: wrap;\r\n\t\t}\r\n\r\n\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\tdisplay: table;\r\n\t\t\twidth: auto;\r\n\t\t\t> * { display: table-cell; vertical-align: top; }\r\n\r\n\t\t\t&--wrap:not([class*=\"grid--vAlign\"]):not([class*=\"grid--space-\"]) {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t> * {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tfloat: left;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tclear: both;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&[class*='grid--vAlign'][class*='grid--cols'] {\r\n\t\t\t\tdisplay: block;\r\n\r\n\t\t\t\t> * {\r\n\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--vAlign {\r\n\t\t\t\t&-top {\r\n\t\t\t\t\t> * { vertical-align: top; }\r\n\t\t\t\t}\r\n\t\t\t\t&-center {\r\n\t\t\t\t\t> * { vertical-align: middle; }\r\n\t\t\t\t}\r\n\t\t\t\t&-bottom {\r\n\t\t\t\t\t> * { vertical-align: bottom; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t&__cell {\r\n\t\t\t\t&--vAlign {\r\n\t\t\t\t\t&-top { vertical-align: top; }\r\n\t\t\t\t\t&-center { vertical-align: middle; }\r\n\t\t\t\t\t&-bottom { vertical-align: bottom; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--align {\r\n\t\t\t\t&-stretch, &-left, &-center, &-right {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\t> * {\r\n\t\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\t\tfloat: none;\r\n\t\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t&-left {\r\n\t\t\t\t\ttext-align: left;\r\n\t\t\t\t}\r\n\t\t\t\t&-center {\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t}\r\n\t\t\t\t&-right {\r\n\t\t\t\t\ttext-align: right;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--space {\r\n\t\t\t\t&-between, &-around, &-evenly {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t\t> * {\r\n\t\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\t\tfloat: none;\r\n\t\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--vertical {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tclear: both;\r\n\t\t\t\t}\r\n\t\t\t\t& > * {\r\n\t\t\t\t\tfloat: left;\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//allows IE to use floats instead of display table without affecting modern browsers\r\n\t\t&--ieFloat, &--noStretch, &--noResize {\r\n\t\t\t@include ieFloat;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","@function fill-blank-columns($bp-list){\r\n\t$i: 0;\r\n\t@while ($i < length($bp-list)) {\r\n\t\t@if (not map-has-key($bp-list, $i) and $i > 0) {\r\n\t\t\t$bp-list: map-merge($bp-list, ($i: false));\r\n\t\t}\r\n\t\t$i: $i + 1;\r\n\t}\r\n\t@return $bp-list;\r\n}\r\n$grid-bp-list: fill-blank-columns($grid-bp-list);\r\n\r\n@function is-percentage($value) {\r\n  @return is-number($value) and unit($value) == '%';\r\n}\r\n\r\n@function column-width($col-count){\r\n\t@return if($grid-calc-support, calc(99.9999% / #{$col-count}), percentage(1/$col-count));\r\n}\r\n\r\n//switches IE (and other non-flexbox friendly browsers) to using float mode\r\n@mixin ieFloat {\r\n\t@if ($grid-legacy-support) {\r\n\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\tdisplay: block;\r\n\t\t\t&:after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tclear: both;\r\n\t\t\t}\r\n\t\t\t> * {\r\n\t\t\t\tfloat: left;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin generate-column-breakpoints ($breaks){\r\n\t@if ($breaks != false) {\r\n\t\t@each $V-columnWidth, $BP-deviceWidth in $breaks {\r\n\t\t\t$col-width: $V-columnWidth;\r\n\t\t\t@if (not is-percentage($V-columnWidth)){\r\n\t\t\t\t$col-width: column-width($V-columnWidth);\r\n\t\t\t}\r\n\t\t\t//media query defaults to max-width if only a pixel value is given\r\n\t\t\t$mq: if(length($BP-deviceWidth) > 1, $BP-deviceWidth, (max, $BP-deviceWidth));\r\n\t\t\t@include mq($mq){\r\n\t\t\t\twidth: $col-width;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//Generates the grid cell gutters\r\n@mixin generate-gutters ($format, $gutter, $outerGutters: false){\r\n\r\n\t$gutterCount: length($gutter);\r\n\r\n\t$g1: 1;\r\n\t$g2: if($gutterCount > 1, 2, 1);\r\n\r\n\t$gutterSet: map-get((\r\n\t\t1: (\r\n\t\t\ttop: $gutter,\r\n\t\t\tright: $gutter,\r\n\t\t\tbottom: $gutter,\r\n\t\t\tleft: $gutter,\r\n\t\t),\r\n\t\t2: (\r\n\t\t\ttop: nth($gutter, $g1),\r\n\t\t\tright: nth($gutter, $g2),\r\n\t\t\tbottom: nth($gutter, $g1),\r\n\t\t\tleft: nth($gutter, $g2),\r\n\t\t),\r\n\t), $gutterCount);\r\n\r\n\t$gutter-top: map-get($gutterSet, top);\r\n\t$gutter-right: map-get($gutterSet, right);\r\n\t$gutter-bottom: map-get($gutterSet, bottom);\r\n\t$gutter-left: map-get($gutterSet, left);\r\n\r\n\t$margin: map-get((\r\n\t\t1: -$gutter-top,\r\n\t\t2: (-$gutter-top) (-$gutter-right),\r\n\t), $gutterCount);\r\n\r\n\t@if ($format == 'mixin' and ($outerGutters == 'v' or $outerGutters == 'top' or $outerGutters == true)) {\r\n\t\tmargin: $margin;\r\n\t\tborder-width: $gutter-top $gutter-right 0 0;\r\n\t} @else {\r\n\t\tmargin: 0 (-$gutter-right) (-$gutter-bottom) (-$gutter-left);\r\n\t\tborder-width: 0 $gutter-right 0 0;\r\n\t}\r\n\r\n\t> * {\r\n\t\tborder-width: 0 0 $gutter-bottom $gutter-left;\r\n\t}\r\n\r\n\t@if ($grid-legacy-support) {\r\n\t\t.lt-ie9 & {\r\n\t\t\t&, > * {\r\n\t\t\t\tborder-color: $grid-gutter-ie-fallback;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$mq-width: $grid-page-width + $gutter-left + $gutter-right;\r\n\r\n\t@if ($format == 'classes'){\r\n\t\t//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size\r\n\t\t&.#{$fullPrefix}grid--outerGutters {\r\n\r\n\t\t\t&, &-v, &-top {\r\n\t\t\t\tborder-top-width: $gutter-top;\r\n\t\t\t}\r\n\r\n\t\t\t@include mq(max, ($mq-width)){\r\n\t\t\t\t&-h-delayed {\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&-left-delayed {\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&-right-delayed {\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t\t&-h-delayed, &-left-delayed, &-right-delayed {\r\n\t\t\t\t\t\t\tmargin-left: -$gutter-left;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t&, &-h {\r\n\t\t\t\t\t\tborder-right-width: $gutter-right !important;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} @else if ($format == 'mixin') {\r\n\t\t//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size\r\n\t\t@if($outerGutters){\r\n\t\t\t@include mq(max, $mq-width){\r\n\t\t\t\t@if($outerGutters == 'h-delayed'){\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t} @else if ($outerGutters == 'left-delayed'){\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t} @else if ($outerGutters == 'right-delayed'){\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t@if (\r\n\t\t\t\t\t\t$outerGutters == 'h-delayed' or\r\n\t\t\t\t\t\t$outerGutters == 'left-delayed' or\r\n\t\t\t\t\t\t$outerGutters == 'right-delayed'\r\n\t\t\t\t\t){\r\n\t\t\t\t\t\tmargin-left: -$gutter-left;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@if ($outerGutters == true or $outerGutters == 'h'){\r\n\t\t\t\t\t\tborder-right-width: $gutter-right !important;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin parse-gutter-data($gutter, $systemType, $outerGutters: false){\r\n\t@if (nth($gutter,1) == 'mq') {\r\n\r\n\t\t$gutter_data: nth($gutter,2);\r\n\r\n\t\t@for $i from 1 through length($gutter_data){\r\n\t\t\t$gutter_value: nth($gutter_data, $i);\r\n\t\t\t$gutter_is_mq: false;\r\n\r\n\t\t\t@if (length($gutter_value) > 1){\r\n\t\t\t\t$gutter_is_mq: type-of(nth(nth($gutter_value,2),1)) == 'string';\r\n\t\t\t}\r\n\r\n\t\t\t@if ($gutter_is_mq){\r\n\t\t\t\t$gutterSize: nth($gutter_value,1);\r\n\t\t\t\t$mediaQuery: nth($gutter_value,2);\r\n\t\t\t\t@include mq($mediaQuery){\r\n\t\t\t\t\t@include generate-gutters($systemType, $gutterSize, $outerGutters);\r\n\t\t\t\t}\r\n\t\t\t} @else {\r\n\t\t\t\t@include generate-gutters($systemType, $gutter_value, $outerGutters);\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t@include generate-gutters($systemType, $gutter, $outerGutters);\r\n\t}\r\n}\r\n","$mediaQuery: ();\r\n\r\n$mq-ems: false !default;\r\n$mq-em-base: 16px !default;\r\n$mq-debug: false !default;\r\n\r\n@import '_functions';\r\n\r\n@function mediaType($mediaType: false, $hasAnd: true){\r\n\t$media: '';\r\n\t$mediaType: if($mediaType == 'not', 'not all', $mediaType);\r\n\t@if ($mediaType){\r\n\t\t$media: if($hasAnd, $mediaType + ' and ', $mediaType);\r\n\t}\r\n\t@return $media;\r\n}\r\n\r\n@function isRatio($string){\r\n\t@if (type-of($string) == 'string' and $string != 'plus'){\r\n\t\t@if (str-index($string, \"/\")){\r\n\t\t\t@return true;\r\n\t\t}\r\n\t}\r\n\t@return false;\r\n}\r\n\r\n@function isMedia($string){\r\n\t@return type-of($string) == 'string' and $string != 'plus' and not isRatio($string);\r\n}\r\n\r\n@function calculateMQ($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug){\r\n\r\n\t$swap-values: false;\r\n\r\n\t$mediaTypeString: '' + $mediaType + '';\r\n\r\n\t$invalidMediaType:\r\n\t\t($mediaType != false) and (\r\n\t\t\t(type-of($mediaType) == 'number') or\r\n\t\t\t(str-index($mediaTypeString, '/') != null)\r\n\t\t);\r\n\r\n\t@if ($invalidMediaType == true){\r\n\t\t@error '\"'+$mediaType+'\" is not a valid media type';\r\n\t}\r\n\r\n\t@if ($range == null) {\r\n\t\t@return $mediaType;\r\n\t}\r\n\r\n\t@if ($breakpoint_2 != null){\r\n\r\n\t\t@if (isRatio($breakpoint_1)){\r\n\r\n\t\t\t$A1: get-start($breakpoint_1);\r\n\t\t\t$A2: get-end($breakpoint_1);\r\n\r\n\t\t\t$B1: get-start($breakpoint_2);\r\n\t\t\t$B2: get-end($breakpoint_2);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug range_numbers \"('A1/A2', 'B1/B2')\" (A1: $A1, A2: $A2, B1: $B1, B2: $B2);\r\n\t\t\t}\r\n\r\n\t\t\t$swap-values: $A1 / $A2 < $B1 / $B2;\r\n\t\t} @else {\r\n\t\t\t$swap-values: $breakpoint_1 < $breakpoint_2;\r\n\t\t}\r\n\r\n\t\t//Swaps the breakpoint_s around\r\n\t\t@if ($swap-values){\r\n\t\t\t$temp: $breakpoint_1;\r\n\t\t\t$breakpoint_1: $breakpoint_2;\r\n\t\t\t$breakpoint_2: $temp;\r\n\t\t}\r\n\r\n\t} @else {\r\n\t\t$breakpoint_2: 0;\r\n\t}\r\n\r\n\t$mediaString: '';\r\n\r\n\t@if ($range == 'orientation'){\r\n\t\t@if ($breakpoint_1 != 'landscape' and $breakpoint_1 != 'portrait'){\r\n\t\t\t@error '\"orientation\" range only accepts the values \"landscape\" and \"portrait\". Currently providing the value \"#{$breakpoint_1}\".';\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t@debug calculateMQ (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType);\r\n\t}\r\n\r\n\t@if (str-index($range, 'inside') != null or str-index($range, 'outside') != null){\r\n\t\t@if ($breakpoint_2 == 0) {\r\n\t\t\t@error '\"#{$range}\" range requires a second value. Currently only providing \"#{$breakpoint_1}\" as a value.';\r\n\t\t}\r\n\t} @else {\r\n\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t@error '\"#{$range}\" range can only take one value. Currently providing both \"#{$breakpoint_1}\" and \"#{$breakpoint_2}\" as values.';\r\n\t\t}\r\n\t}\r\n\r\n\t@if (str-index($range, 'ratio') == null){\r\n\t\t//if a standard media query\r\n\t\t@if (type-of($breakpoint_1) != number and $range != 'orientation'){\r\n\t\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to be pixel values';\r\n\t\t\t} @else {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a pixel value';\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t//else if it's a ratio...\r\n\t\t@if ((($breakpoint_2 != 0) and (type-of($breakpoint_2) != string))){\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to both be strings in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t} @else if (type-of($breakpoint_1) != string) {\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a string in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t}\r\n\t}\r\n\r\n\t$breakpoint_1_plus: $breakpoint_1 + 1;\r\n\t$breakpoint_2_plus: $breakpoint_2 + 1;\r\n\r\n\t$media: if($mediaType, $mediaType, '');\r\n\r\n\t@if ($mq-ems) {\r\n\t\t$breakpoint_1: _mq-em($breakpoint_1);\r\n\t\t$breakpoint_2: _mq-em($breakpoint_2);\r\n\t\t$breakpoint_1_plus: _mq-em($breakpoint_1_plus);\r\n\t\t$breakpoint_2_plus: _mq-em($breakpoint_2_plus);\r\n\t}\r\n\r\n\t$min-width: '(min-width: #{$breakpoint_1_plus})';\r\n\t$max-width: '(max-width: #{$breakpoint_1})';\r\n\r\n\t$inside-width: '(max-width: #{$breakpoint_1}) and (min-width: #{$breakpoint_2_plus})';\r\n\t$outside-width: '(max-width: #{$breakpoint_2}), '+$media+'(min-width: #{$breakpoint_1_plus})';\r\n\r\n\t$mediaString: map-get((\r\n\t//*1 value given*/\r\n\t\tmin : $min-width,\r\n\t\tmax : $max-width,\r\n\t\r\n\t\tmin-width : $min-width,\r\n\t\tmax-width : $max-width,\r\n\r\n\t\tmin-height : '(min-height: #{$breakpoint_1_plus})',\r\n\t\tmax-height : '(max-height: #{$breakpoint_1})',\r\n\r\n\t\tratio : '(aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-ratio : '(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-ratio : '(max-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\tdevice-ratio : '(device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-device-ratio : '(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\torientation : '(orientation: #{$breakpoint_1})',\r\n\r\n\t//*2 values given*/\r\n\t\tinside : $inside-width,\r\n\t\toutside : $outside-width,\r\n\r\n\t\tinside-width : $inside-width,\r\n\t\toutside-width : $outside-width,\r\n\r\n\t\tinside-height : '(max-height: #{$breakpoint_1}) and (min-height: #{$breakpoint_2_plus})',\r\n\t\toutside-height : '(max-height: #{$breakpoint_2}), '+$media+'(min-height: #{$breakpoint_1_plus})',\r\n\t\t\r\n\t\tinside-ratio : '(max-aspect-ratio: #{$breakpoint_1}) and (min-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-ratio : '(max-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\t\r\n\t\tinside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1}) and (min-device-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t), $range);\r\n\r\n\t@return $mediaString;\r\n}\r\n\r\n@function isBasicQuery($range) {\r\n\t$first_is_string: type-of(nth($range,1)) == string;\r\n\t$longer_than_1: length($range) > 1;\r\n\t$not_plus_statment: true;\r\n\t@if ($longer_than_1) {\r\n\t\t$not_plus_statment: nth($range,2) != 'plus';\r\n\t}\r\n\t@return $first_is_string and $longer_than_1 and $not_plus_statment;\r\n}\r\n\r\n@function get_values($mqSet, $debug: $mq-debug){\r\n\r\n\t@if ($mq-debug) {\r\n\t\t@debug mqSet (length: length($mqSet), mqSet: $mqSet);\r\n\t}\r\n\r\n\t$range: nth($mqSet,1);\r\n\t$breakpoint_1: null;\r\n\t$breakpoint_2: null;\r\n\t$media: false;\r\n\r\n\t@if (length($mqSet) == 1){\r\n\t\t$first: nth($mqSet, 1);\r\n\t\t@if (type-of($first) != 'string'){\r\n\t\t\t@error '\"#{$first}\" is not a valid media type';\r\n\t\t}\r\n\t\t$range: null;\r\n\t\t$media: $first;\r\n\t}\r\n\r\n\t@if (length($mqSet) > 1){\r\n\t\t$breakpoint_1: nth($mqSet, 2);\r\n\t}\r\n\r\n\t@if (length($mqSet) == 3){\r\n\t\t$third: nth($mqSet, 3);\r\n\r\n\t\t@if (type-of($third) == 'number' or isRatio($third)){\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t} @else {\r\n\t\t\t$media: $third;\r\n\t\t}\r\n\t}\r\n\r\n\t@if (length($mqSet) == 4){\r\n\t\t$third: nth($mqSet, 3);\r\n\t\t$fourth: nth($mqSet, 4);\r\n\r\n\t\t@if ($fourth == false and isMedia($third)){\r\n\t\t\t$media: $third;\r\n\t\t} @else {\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t\t$media: $fourth;\r\n\t\t}\r\n\r\n\t\t@if ($media == \" and \") {\r\n\t\t\t$media: '';\r\n\t\t}\r\n\t}\r\n\r\n\t$finalValues: (\r\n\t\trange: $range,\r\n\t\tbreakpoint_1: $breakpoint_1,\r\n\t\tbreakpoint_2: $breakpoint_2,\r\n\t\tmedia: mediaType($media, $range != null),\r\n\t);\r\n\r\n\t@if ($debug) {\r\n\t\t@debug get_values_result $finalValues;\r\n\t}\r\n\r\n\t@return $finalValues;\r\n}\r\n\r\n@function get_media($mqSet){\r\n\t@return map-get( get_values($mqSet), media);\r\n}\r\n\r\n@function calculateBasicQuery($mqSet, $isAndStatement: false, $debug: $mq-debug){\r\n\t$values: get_values($mqSet, $debug);\r\n\r\n\t$range: map-get($values, range);\r\n\t$breakpoint_1: map-get($values, breakpoint_1);\r\n\t$breakpoint_2: map-get($values, breakpoint_2);\r\n\t$media: map-get($values, media);\r\n\r\n\t@if ($range == null) {\r\n\t\t//if only a media type is given return nothing because it is added elsewhere\r\n\t\t@return '';\r\n\t}\r\n\r\n\t@if ((str-index($range, 'outside') != null) and $isAndStatement){\r\n\t\t$error: 'All \"outside\" range types are incompatible with \"plus\" statements: (' + $mqSet + ')';\r\n\t\t@error $error;\r\n\t}\r\n\r\n\t@return calculateMQ($range, $breakpoint_1, $breakpoint_2, $media, $debug: $debug);\r\n}\r\n\r\n@function joinQueries($range, $queryString: (), $debug: $mq-debug){\r\n\r\n\t$isAndStatement: false;\r\n\t$contains_media_only_statement: false;\r\n\t$media_statement_at_start: true;\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t@for $i from 1 through length($range) {\r\n\t\t\t$statement: nth($range,$i);\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug joinQueries_statement $statement;\r\n\t\t\t}\r\n\t\t\t$mediaNotFirst: $i != 1 and isMedia($statement);\r\n\t\t\t@if ($statement == 'plus') {\r\n\t\t\t\t$isAndStatement: true;\r\n\t\t\t\t@if ($i == 2 and length(nth($range,1)) == 1) {\r\n\t\t\t\t\t$contains_media_only_statement: true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@if ($mediaNotFirst){\r\n\t\t\t\t$media_statement_at_start: false;\r\n\t\t\t}\r\n\t\t}\r\n\t} @else if (type-of(nth($range,1)) == 'string') {\r\n\t\t$contains_media_only_statement: true;\r\n\t}\r\n\r\n\t@if ($isAndStatement and not $media_statement_at_start) {\r\n\t\t@error 'Media type definitions must be specified at the start of plus statements: (#{$range)})';\r\n\t}\r\n\r\n\t//Uses this functionality if using a single level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--single: inside, 1000px, 500px;\r\n\t//@include mq($MQ-example--single){}\r\n\t@if (isBasicQuery($range)){\r\n\r\n\t\t@return get_media($range) + calculateBasicQuery($range, $isAndStatement, $debug: $debug);\r\n\r\n\t//Uses this functionality if using a multi level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--multiple:\r\n\t//\t(inside, 1000px, 500px),\r\n\t//\t(min, 1200px)\r\n\t//;\r\n\t//@include mq($MQ-example--multiple){}\r\n\t} @else {\r\n\r\n\t\t@each $mqSet in $range {\r\n\r\n\t\t\t@if ($mqSet != 'plus') {\r\n\t\t\t\t@if (isBasicQuery($mqSet)){\r\n\r\n\t\t\t\t\t$newQuery: calculateBasicQuery($mqSet, $isAndStatement, $debug: $debug);\r\n\r\n\t\t\t\t\t$media: get_media($mqSet);\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($queryString == ()){\r\n\t\t\t\t\t\t\t$queryString: $media + $newQuery;\r\n\t\t\t\t\t\t} @else if ($newQuery != '') {\r\n\t\t\t\t\t\t\t$queryString: $queryString + ' and ' + $newQuery;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t$queryString: append($queryString, $media + $newQuery, 'comma');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} @else {\r\n\r\n\t\t\t\t\t$is_media_only_statment: $contains_media_only_statement and type-of($mqSet) == 'string';\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: mediaType($mqSet, false);\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: joinQueries($mqSet, $queryString, $debug);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@if (length($queryString) > 1){\r\n\t\t\t\t\t\t\t$error: 'mq-scss does not support \"or\" statements inside \"plus\" statements: ' + $queryString;\r\n\t\t\t\t\t\t\t@error $error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: $mqSet;\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: append($queryString, joinQueries($mqSet, $debug: $debug), 'comma');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@return $queryString;\r\n\t}\r\n}\r\n\r\n@mixin mq($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug) {\r\n\r\n\t@if ($debug) {\r\n\t\t@debug $range;\r\n\t}\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t$finalOutput: joinQueries($range, $debug: $debug);\r\n\t\t@if ($debug) {\r\n\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalOutput;\r\n\t\t}\r\n\t\t@media #{$finalOutput} {\r\n\t\t\t@content;\r\n\t\t}\r\n\r\n\t//Uses this functionality if placing MQ data inline\r\n\t//eg:\r\n\t//@include mq(inside, 1000px, 500px, 'screen');\r\n\t} @else {\r\n\t\t//standardises the values to prevent mediaType from getting confused with breakpoint_2\r\n\t\t$mediaOnly: $breakpoint_1 == null and $breakpoint_2 == null and $mediaType == false;\r\n\t\t@if ($debug) {\r\n\t\t\t@debug inline_mq_values (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType, mediaOnly: $mediaOnly);\r\n\t\t}\r\n\t\t$values: get_values(if($mediaOnly, $range, ($range $breakpoint_1 $breakpoint_2 $mediaType)), $debug: $debug);\r\n\r\n\t\t$newRange: map-get($values, range);\r\n\t\t$newWidth1: map-get($values, breakpoint_1);\r\n\t\t$newWidth2: map-get($values, breakpoint_2);\r\n\t\t$newMedia: map-get($values, media);\r\n\r\n\t\t@if ($mediaOnly) {\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $newMedia;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $newMedia } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t} @else {\r\n\r\n\t\t\t$finalMQ: $newMedia + calculateMQ($newRange, $newWidth1, $newWidth2, $debug: $debug);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalMQ ;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $finalMQ } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t//spacer for seperating results\r\n\t\t@debug '';\r\n\t}\r\n\r\n}\r\n\r\n@mixin retina($density: 2) {\r\n\t\t@media\r\n\t\tonly screen and (min-device-pixel-ratio: $density),\r\n\t\tonly screen and (min-resolution: $density * 96ppi),\r\n\t\tonly screen and (min-resolution: $density * 1dppx) {\r\n\t\t\t@content;\r\n\t}\r\n}\r\n","@import './public/css/core/variables';\n@import './public/css/core/mixins';\n\n.a-z-container {\n  background-color: #E1F3F8;\n  padding: 2rem 0;\n  @include media($narrow-screen) {\n    padding: 42px 0 35px 0;\n  }\n  @include media-max($narrow-screen) {\n    padding: 25px 25px 30px 25px;\n    h1 {\n      font-size: 3rem;\n    }\n  }\n  h1 {\n    color: #205493;\n  }\n  a {\n    @include sfgov-button-secondary;\n  }\n  ul {\n    padding-left: 0;\n  }\n  .sfgov-tabbed-navigation ul li a {\n    padding: 1.2rem 1.5rem;\n    margin-right: 10px;\n  }\n}\n","@import \"../../../node_modules/susy/sass/susy-prefix\";\n@import \"../../../node_modules/susy/sass/plugins/svg-grid\";\n@import '../../../node_modules/mq-scss/mq';\n@import '../../../node_modules/gutter-grid/grid-mixin';\n@import '../../../node_modules/gutter-grid/grid-classes';\n\n// Utilities\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n\n\n// visually-hidden\n//\n// Hide elements visually, but keep them available for screen readers. Don't use\n// this for elements that need to be focusable (e.g. a, button, input, select,\n// textarea). For those, please use `visually-hidden-focusable` instead.\n//\n// Usage: `@include visually-hidden;`\n\n@mixin visually-hidden {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n  }\n}\n\n// visually-hidden-focusable\n//\n// Hide elements visually, but keep them available, and focusable for screen\n// reader and keyboard users.\n//\n// Usage: `@include visually-hidden-focusable;`\n\n@mixin visually-hidden-focusable {\n  &:active,\n  &:focus {\n    clip: auto;\n    height: auto;\n    overflow: visible;\n    position: static !important;\n    width: auto;\n  }\n}\n\n// Typography\n\n@mixin source-sans-pro {\n  font-family: \"Source Sans Pro\", sans-serif;\n}\n\n@mixin merriweather {\n  font-family: \"Merriweather\", sans-serif;\n}\n\n// Heading mixins\n@mixin title {\n  font-size: $title-font-size;\n  font-weight: $font-bold;\n}\n\n@mixin h1 {\n  font-size: $h1-font-size;\n  font-weight: $font-bold;\n}\n\n@mixin sfgov-h1 {\n  @include merriweather;\n  margin: 0;\n}\n\n@mixin h2 {\n  font-size: $h2-font-size;\n  font-weight: $font-bold;\n}\n\n@mixin h3 {\n  font-size: $h3-font-size;\n  font-weight: $font-bold;\n}\n\n@mixin h4 {\n  font-size: $h4-font-size;\n  font-weight: $font-bold;\n}\n\n// Focus state mixin\n@mixin focus {\n  outline: $focus-outline;\n  outline-offset: $focus-spacing;\n}\n\n// Mobile-first media query helper\n@mixin media($bp) {\n  @media screen and (min-width: #{$bp}) {\n    @content;\n  }\n}\n\n// Screen reader only helper\n@mixin sr-only() {\n  position: absolute;\n  left: -999em;\n}\n\n// This \"negates\" the sr-only() helper; useful if\n// we want the default state of something to be\n// for screen readers only, but we want to force\n// it to show for sighted users under more specific\n// conditions.\n@mixin not-sr-only() {\n  position: static;\n}\n\n// Aria hidden helper\n@mixin accessibly-hidden() {\n  &[aria-hidden=true] {\n    display: none;\n  }\n}\n\n// Unstyled list helper\n@mixin unstyled-list() {\n  @include margin(0 null);\n  list-style-type: none;\n  padding-left: 0;\n\n  > li {\n    margin-bottom: 0;\n  }\n}\n\n// Font smoothing mixin\n// Only use for light text on dark background\n// TODO: Remove after adding PostCSS\n@mixin font-smoothing {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n}\n\n\n@mixin display-icon($icon, $direction, $size, $margin, $hover) {\n  &::#{$direction} {\n    background-image: url('#{$image-path}/#{$icon}.png');\n    background-image: url('#{$image-path}/#{$icon}.svg');\n    background-size: 100%;\n    content: '';\n    display: inline-block;\n    height: $size;\n    width: $size;\n\n    /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */\n    @if $direction == 'after' {\n      margin-left: $margin;\n    } @else {\n      margin-right: $margin;\n    }\n    /* stylelint-enable */\n  }\n\n  @if $hover == 'hover' {\n    &:hover::#{$direction} {\n      background-image: url('#{$image-path}/#{$icon}-hover.png');\n      background-image: url('#{$image-path}/#{$icon}-hover.svg');\n    }\n  }\n}\n\n// Buttons\n\n@mixin disabledesque {\n  background-color: $color-gray-lighter;\n  pointer-events: none;\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: $color-gray-lighter;\n    border: 0;\n    box-shadow: none;\n  }\n}\n\n@mixin button-unstyled {\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  font-weight: $font-normal;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n  -webkit-font-smoothing: auto;\n  &:hover {\n    background-color: transparent;\n  }\n}\n\n// The default button:\n\n@mixin sfgov-button() {\n  @include font-smoothing;\n  @include source-sans-pro;\n  margin: 15px 0;\n  background-color: $color-primary;\n  border: 0;\n  border-radius: $button-border-radius;\n  color: $color-white;\n  cursor: pointer;\n  display: inline-block;\n  font-size: $base-font-size;\n  font-weight: $font-bold;\n  line-height: 1;\n  padding: 1rem 2rem;\n  text-align: center;\n  text-decoration: none;\n  width: 100%;\n  @include media($mobile-screen) {\n    width: auto;\n  }\n  &:hover {\n    background-color: $color-primary-darker;\n    border-bottom: 0;\n    color: $color-white;\n    text-decoration: none;\n  }\n  &:active {\n    background-color: $color-primary-darkest;\n  }\n}\n\n@mixin sfgov-button-primary-alt() {\n  @include sfgov-button;\n  background-color: $color-primary-alt;\n  color: $color-base;\n  &:hover {\n    background-color: $color-primary-alt-dark;\n  }\n  &:active {\n    background-color: $color-primary-alt-darkest;\n    color: $color-white;\n  }\n}\n\n\n@mixin sfgov-button-secondary() {\n  @include sfgov-button;\n  background-color: $color-white;\n  box-shadow: $button-stroke $color-primary;\n  color: $color-primary;\n  &:hover {\n    box-shadow: $button-stroke $color-primary-darker;\n    color: #fff;\n  }\n  &:active {\n    box-shadow: $button-stroke $color-primary-darkest;\n    color: $color-primary-darkest;\n  }\n  &.is-active {\n    background-color: #0071bc !important;\n    color: #fff;\n  }\n}\n\n@mixin sfgov-button-secondary-inverse() {\n  background: transparent;\n  box-shadow: $button-stroke $color-white;\n  color: $color-white;\n  &:hover {\n    box-shadow: $button-stroke $color-gray-lighter;\n    color: $color-gray-lighter;\n  }\n  &:active {\n    box-shadow: $button-stroke $color-gray-light;\n    color: $color-gray-lighter;\n  }\n}\n\n@mixin sfgov-button-gray {\n  @include sfgov-button;\n  background-color: $color-gray;\n  &:hover {\n    background-color: $color-gray-dark;\n  }\n  &:active {\n    background-color: $color-base;\n  }\n}\n\n@mixin sfgov-button-red {\n  @include sfgov-button;\n  background-color: $color-secondary;\n  &:hover {\n    background-color: $color-secondary-dark;\n  }\n  &:active {\n    background-color: $color-secondary-darkest;\n  }\n}\n\n@mixin sfgov-button-big {\n  @include sfgov-button;\n  border-radius: 8px;\n  font-size: 2.4rem;\n  padding: 1.5rem 3rem;\n}\n\n@mixin disabledesque {\n  background-color: $color-gray-lighter;\n  pointer-events: none;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: $color-gray-lighter;\n    border: 0;\n    box-shadow: none;\n  }\n}\n\n// Layout\n\n@mixin media($bp) {\n  @media screen and (min-width: #{$bp}) {\n    @content;\n  }\n}\n\n@mixin media-max($bp) {\n  @media screen and (max-width: #{$bp}) {\n    @content;\n  }\n}\n\n// Basic grid settings.\n$susy: (\n  'columns': susy-repeat(12),\n  'gutters': 14px,\n  'spread': 'narrow',\n  'container-spread': 'narrow'\n);\n\n@mixin sfgov-container-full {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n@mixin sfgov-container-full--no-padding() {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n  }\n}\n\n@mixin sfgov-grid-two-columns--padding() {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}","// Every variable is declared as !default so that it can be\n// overridden by a previous import.\n//\n\n// Typography\n// Removing the !default from $em-base so we are not inheriting that\n// value from Bourbon.\n$em-base:             10px;\n$base-font-size:      1.7rem !default;\n$small-font-size:     1.4rem !default;\n$lead-font-size:      2rem !default;\n$title-font-size:     5.2rem !default;\n$h1-font-size:        4rem !default;\n$h2-font-size:        3rem !default;\n$h3-font-size:        2rem !default;\n$h4-font-size:        1.7rem !default;\n$h5-font-size:        1.5rem !default;\n$h6-font-size:        1.3rem !default;\n$base-line-height:    1.5 !default;\n$heading-line-height: 1.3 !default;\n$lead-line-height:    1.7 !default;\n\n$helvetica: 'Helvetica', sans-serif;\n$georgia: 'Georgia', sans-serif;\n$image-path: '/images';\n\n$font-sans:           'Source Sans Pro', $helvetica !default;\n$font-serif:          'Merriweather', $georgia !default;\n\n// TODO these should be called font-weight-${}\n$font-normal:         400 !default;\n$font-bold:           700 !default;\n\n// Color\n$color-primary:              #0071bc !default;\n$color-primary-darker:       #205493 !default;\n$color-primary-darkest:      #112e51 !default;\n\n$color-primary-alt:          #02c0e7 !default;\n$color-primary-alt-dark:     #00a6d2 !default;\n$color-primary-alt-darkest:  #046b99 !default;\n$color-primary-alt-light:    #9bdaf1 !default;\n$color-primary-alt-lightest: #e1f3f8 !default;\n\n$color-secondary:            #e31c3d !default;\n$color-secondary-dark:       #cd2026 !default;\n$color-secondary-darkest:    #981b1e !default;\n$color-secondary-light:      #e59393 !default;\n$color-secondary-lightest:   #f9dede !default;\n\n$color-white:                #ffffff !default;\n$color-black:                #000000 !default;\n$color-black-light:           !default;\n\n$color-gold:                 #fdb81e !default;\n$color-gold-lightest:        #fff1d2 !default;\n\n$color-gray-dark:            #323a45 !default;\n$color-gray:                 #5b616b !default;\n$color-gray-medium:          #757575 !default;\n$color-gray-light:           #aeb0b5 !default;\n$color-gray-lighter:         #d6d7d9 !default;\n$color-gray-lightest:        #f1f1f1 !default;\n\n$color-green:                #2e8540 !default;\n$color-green-light:          #4aa564 !default;\n$color-green-lighter:        #94bfa2 !default;\n$color-green-lightest:       #e7f4e4 !default;\n\n$color-base:                 #212121 !default;\n$color-focus:                $color-gray-light !default;\n$color-visited:              #4c2c92 !default;\n\n$color-shadow:               rgba(#000, 0.3) !default;\n$color-transparent:          rgba(#000, 0) !default;\n\n// Breakpoints\n$tiny-screen: 320px;\n$mobile-screen: 480px;\n$small-screen:  481px !default;\n$medium-screen: 600px !default;\n$medium-screen: 769px;\n$narrow-screen: 950px;\n$large-screen:  1201px !default;\n$wide-screen: 1220px;\n\n// Grid column counts by screen size\n$grid-columns-small: 1 !default;\n$grid-columns-medium: 6 !default;\n$grid-columns-large: 12 !default;\n\n// @media single-keyword helpers\n$small: new-breakpoint(min-width $small-screen $grid-columns-small) !default;\n$medium: new-breakpoint(min-width $medium-screen $grid-columns-medium) !default;\n$large: new-breakpoint(min-width $large-screen $grid-columns-large) !default;\n\n// Set $asset-pipeline to true if you're using the Rails Asset Pipeline\n$asset-pipeline:      false !default;\n\n// Magic Numbers\n$text-max-width:                66ch !default; // 66 characters per line\n$lead-max-width:                77rem !default;\n$site-max-width:                1040px !default;\n$site-margins:                  3rem !default;\n$site-margins-mobile:           1.5rem !default;\n$input-max-width:               46rem !default;\n$label-border-radius:           2px !default;\n$checkbox-border-radius:        2px !default;\n$border-radius:                 3px !default;\n$button-border-radius:          5px !default;\n$button-stroke: inset 0 0 0 2px;\n$focus-outline:                 2px dotted $color-gray-light !default;\n$focus-spacing:                 3px !default;\n$nav-width:                     951px !default;\n$sidenav-current-border-width:  0.4rem !default; // must be in rem for math\n\n// 44 x 44 pixels hit target following Apple iOS Human Interface\n// Guidelines\n$hit-area: 4.4rem !default;\n\n$spacing-x-small: 0.5rem;\n$spacing-small: 1rem;\n$spacing-md-small: 1.5rem;\n$spacing-medium: 2rem;\n$spacing-large: 3rem;\n"]}